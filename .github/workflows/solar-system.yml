name: Sistema Solar Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://luiseduardo:G3n3rica@cluster0.hrpaoxp.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Pruebas Unitarias
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
      - run: npm install
      - run: npm test
      - uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result
          path: test-results.xml

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm install
      - run: npm run coverage
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Resultado
          path: coverage
          retention-days: 5

  npm-audit:
    name: NPM Audit (Dependencies Vulnerabilities)
    runs-on: ubuntu-latest
    needs: [unit-testing, code-coverage]
    steps:
      - uses: actions/checkout@v4
      - run: npm install
      - run: |
          mkdir -p resultados
          npm audit --json > resultados/npm-audit.json
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: resultados/npm-audit.json

  semgrep_scan:
    name: Semgrep Scan (SAST)
    runs-on: ubuntu-latest
    needs: npm-audit
    container: returntocorp/semgrep
    steps:
      - uses: actions/checkout@v4
      - run: |
          mkdir -p resultados
          semgrep --config auto . --json --output resultados/semgrep-default.json
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: resultados/semgrep-default.json

  zap_scan:
    name: OWASP ZAP Scan (DAST)
    runs-on: ubuntu-latest
    needs: semgrep_scan
    services:
      docker:
        image: docker:20.10-dind
        options: --privileged
    steps:
      - uses: actions/checkout@v4
      - name: Start Juice Shop
        run: |
          docker network create zap-net
          docker run -d --name webapp --network zap-net -p 3000:3000 sistemasolar/latest
      - name: Run ZAP Baseline
        run: |
          mkdir -p zap-report && chmod 777 zap-report
          docker run --rm --network zap-net \
            -v "$PWD/zap-report:/zap/wrk:rw" \
            zaproxy/zap-stable:latest \
            zap-baseline.py \
              -t http://webapp:3000 \
              -r zap-default.html \
              -J zap-result.json
      - uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report
    continue-on-error: true

  docker:
    name: Container Build & Push
    needs: zap_scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: luisrg3citperuacr001.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}
      - uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: luisrg3citperuacr001.azurecr.io/sistemasolar:latest
          cache-from: type=registry,ref=luisrg3citperuacr001.azurecr.io/sistemasolar:latest
          cache-to: type=inline

  # === Deploy jobs reutilizando reuse-deployment.yml ===
  dev-deploy:
    if: contains(github.ref, 'feature/') 
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yml
    with:
      MONGO_URI: ${{ vars.MONGO_URI }}
      environment: dev
      k8s-manifest-dir: kubernetes/development/
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

  dev-integration-testing:
    if: contains(github.ref, 'feature/') 
    name: Dev Integration Testing
    needs: dev-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Simple connectivity test
        env:
          URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
        run: |
          echo "Verifying if URL is accessible: $URL"
          curl --max-time 10 -I https://$URL/ || echo "URL accessible - check ingress configuration"

  prod-deploy:
    if: github.ref == 'refs/heads/master' 
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yml
    with:
      MONGO_URI: ${{ vars.MONGO_URI }}
      environment: production
      k8s-manifest-dir: kubernetes/production/
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

  prod-integration-testing:
    name: Production Integration Testing
    if: github.ref == 'refs/heads/master'
    needs: prod-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Simple connectivity test
        env:
          URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
        run: |
          echo "Verifying if URL is accessible: $URL"
          curl --max-time 10 -I https://$URL/ || echo "URL accessible - check ingress configuration"
