name: Sistema Solar Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - master
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://luiseduardo:G3n3rica@cluster0.hrpaoxp.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Pruebas Unitarias
    strategy:
      matrix:
        nodejs_version: [18, 19, 20]
        operating_system: [ubuntu-latest, macos-latest]
        exclude:
          - nodejs_version: 18
            operating_system: macos-latest
    runs-on: ${{ matrix.operating_system }}
    steps:
      -  name: Checkout Repository
         uses: actions/checkout@v4

      -  name: Setup NodeJS Version - ${{ matrix.nodejs_version}}
         uses: actions/setup-node@v3
         with:
          node-version: ${{ matrix.nodejs_version }}

      - name: Install dependencies
        run: npm install
      
      - name: Unit Testing
        run: npm test
      - name: Resultados
        uses: actions/upload-artifact@v3
        

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm install
      - run: npm run coverage
        continue-on-error: true # No bloquea el pipeline si falla la cobertura
      - uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage
          retention-days: 5

  security-controls:
    name: Security Controls
    needs: [unit-testing, code-coverage]
    uses: ./.github/workflows/reuse-security.yml
    with:
      language: node
      docker_image: luisrg3citperuacr001.azurecr.io/sistemasolar:latest
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  docker:
    name: Container Build & Push
    needs: security-controls
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: luisrg3citperuacr001.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}
      - uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: luisrg3citperuacr001.azurecr.io/sistemasolar:latest
          cache-from: type=registry,ref=luisrg3citperuacr001.azurecr.io/sistemasolar:latest
          cache-to: type=inline

  trivy_image_scan:
    name: Trivy Scan - Container Image
    runs-on: ubuntu-22.04
    needs: docker
    steps:
      - name: Install Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy
          trivy --version
      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: luisrg3citperuacr001.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Scan image
        run: |
          mkdir -p resultados
          trivy image luisrg3citperuacr001.azurecr.io/sistemasolar:latest \
            --format json \
            --output resultados/security-trivy-image.json \
            --severity HIGH,CRITICAL
        continue-on-error: true # El pipeline sigue aunque haya vulnerabilidades
      - uses: actions/upload-artifact@v4
        with:
          name: security-trivy-image
          path: resultados/security-trivy-image.json

  dev-deploy:
    if: contains(github.ref, 'feature/')
    needs: trivy_image_scan
    uses: ./.github/workflows/reuse-deployment.yml
    with:
      MONGO_URI: ${{ vars.MONGO_URI }}
      environment: dev
      k8s-manifest-dir: kubernetes/development/
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

  prod-deploy:
    if: github.ref == 'refs/heads/master'
    needs: trivy_image_scan
    uses: ./.github/workflows/reuse-deployment.yml
    with:
      MONGO_URI: ${{ vars.MONGO_URI }}
      environment: production
      k8s-manifest-dir: kubernetes/production/
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}


