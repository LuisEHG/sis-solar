name: Sistema Solar Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://luiseduardo:G3n3rica@cluster0.hrpaoxp.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Pruebas Unitarias
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
      - run: npm install
      - run: npm test
      - uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result
          path: test-results.xml

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm install
      - run: npm run coverage
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Resultado
          path: coverage
          retention-days: 5

  npm-audit:
    name: NPM Audit - Dependencies Vulnerabilities
    runs-on: ubuntu-latest
    needs: [unit-testing, code-coverage]
    steps:
      - uses: actions/checkout@v4
      - run: npm install
      - run: |
          mkdir -p resultados
          npm audit --json > resultados/npm-audit.json
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: resultados/npm-audit.json

  semgrep_scan:
    name: Semgrep Scan - SAST
    runs-on: ubuntu-latest
    needs: npm-audit 
    container: returntocorp/semgrep
    steps:
      - uses: actions/checkout@v4
      - run: |
          mkdir -p resultados
          semgrep --config auto . --json --output resultados/semgrep-default.json
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: resultados/semgrep-default.json
  
  sonarqube_scan:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: npm-audit
    steps:
    - uses: actions/checkout@v4
    - name: Set up Node
      uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: Install dependencies
      run: npm install
    - name: Run tests with coverage
      run: npm run test -- --coverage
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=sistemasolar
          -Dsonar.sources=.
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  trivy_scan:
    name: Trivy Scan - SCA (Filesystem)
    runs-on: ubuntu-22.04
    needs: npm-audit
    steps:
      - uses: actions/checkout@v4
      - name: Set up reports directory
        run: mkdir -p security-reports
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget jq gnupg
      - name: Install Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install -y trivy
          trivy --version
      - name: Update vulnerability database
        run: trivy image --download-db-only
      - name: Run Trivy FS scan (JSON)
        run: |
          trivy fs . \
            --format json \
            --output security-reports/trivy-report.json \
            --severity HIGH,CRITICAL
      - name: Run Trivy FS scan (table)
        run: |
          trivy fs . \
            --format table \
            --output security-reports/trivy-table.txt \
            --severity HIGH,CRITICAL
      - name: Show scan summary
        run: cat security-reports/trivy-table.txt
      - name: Fail on CRITICAL vulnerabilities
        run: |
          CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' security-reports/trivy-report.json)
          echo "üö® Vulnerabilidades cr√≠ticas encontradas: $CRITICAL"
          if [ "$CRITICAL" -gt 0 ]; then
            echo "‚ùå Se encontraron vulnerabilidades cr√≠ticas"
            exit 1
          fi
        continue-on-error: true ## PONGO ESTA ADVERTENCIA PARA QUE EL JOB NO SE DETENGA
      - name: Upload reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-reports
          path: security-reports
          retention-days: 7
          

  zap_scan:
   name: OWASP ZAP Scan - DAST
   runs-on: ubuntu-latest
   needs:  [semgrep_scan, sonarqube_scan, trivy_scan]
   services:
    docker:
      image: docker:20.10-dind
      options: --privileged
   steps:
    - uses: actions/checkout@v4
    - name: Build app image
      run: docker build -t sistemasolar:latest .
    - name: Dockerizando mi aplicacion Sistema Solar
      run: |
        docker network create zap-net
        docker run -d --name sistemasolar --network zap-net -p 3000:3000 sistemasolar:latest
    - name: Run ZAP Baseline
      run: |
        mkdir -p zap-report && chmod 777 zap-report
        docker run --rm --network zap-net \
          -v "$PWD/zap-report:/zap/wrk:rw" \
          zaproxy/zap-stable:latest \
          zap-baseline.py \
            -t http://sistemasolar:3000 \
            -r zap-default.html \
            -J zap-result.json \
      continue-on-error: true
    - uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: zap-report

  docker:
    name: Container Build & Push
    needs: zap_scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: luisrg3citperuacr001.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}
      - uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: luisrg3citperuacr001.azurecr.io/sistemasolar:latest
          cache-from: type=registry,ref=luisrg3citperuacr001.azurecr.io/sistemasolar:latest
          cache-to: type=inline

  trivy_image_scan:
    name: Trivy Scan - Container Image
    runs-on: ubuntu-22.04
    needs: docker
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget jq gnupg
      - name: Install Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install -y trivy
          trivy --version
      - name: Scan image
        run: |
          trivy image luisrg3citperuacr001.azurecr.io/sistemasolar:latest \
            --format json \
            --output trivy-image-report.json \
            --severity HIGH,CRITICAL
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy-image-report.json

  # === Deploy jobs reutilizando reuse-deployment.yml ===
  dev-deploy:
    if: contains(github.ref, 'feature/') 
    needs: trivy_image_scan
    uses: ./.github/workflows/reuse-deployment.yml
    with:
      MONGO_URI: ${{ vars.MONGO_URI }}
      environment: dev
      k8s-manifest-dir: kubernetes/development/
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

  dev-integration-testing:
    if: contains(github.ref, 'feature/') 
    name: Dev Integration Testing
    needs: dev-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Simple connectivity test
        env:
          URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
        run: |
          echo "Verifying if URL is accessible: $URL"
          curl --max-time 10 -I https://$URL/ || echo "URL accessible - check ingress configuration"

  prod-deploy:
    if: github.ref == 'refs/heads/master' 
    needs: trivy_image_scan
    uses: ./.github/workflows/reuse-deployment.yml
    with:
      MONGO_URI: ${{ vars.MONGO_URI }}
      environment: production
      k8s-manifest-dir: kubernetes/production/
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

  prod-integration-testing:
    name: Production Integration Testing
    if: github.ref == 'refs/heads/master'
    needs: prod-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Simple connectivity test
        env:
          URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
        run: |
          echo "Verifying if URL is accessible: $URL"
          curl --max-time 10 -I https://$URL/ || echo "URL accessible - check ingress configuration"
